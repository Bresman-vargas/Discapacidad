
package igu;
//hola
import com.formdev.flatlaf.FlatLightLaf;
import com.formdev.flatlaf.IntelliJTheme;
import java.awt.Color;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.RowFilter;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import logica.Controladora;
import logica.Servicio;
import javax.swing.UIManager;
import javax.swing.table.TableRowSorter;
import logica.Beneficiario;
import logica.AsignacionServicio;

public class MenuServicios extends javax.swing.JFrame {
    private static final Color ACCENT_COLOR_LIGHT = new Color(50, 35, 62);
    private static final Color ACCENT_COLOR_BLACK = new Color(255,216,102);
    private static final Color FOREGROUND_COLOR_LIGHT = Color.WHITE;
    private static final Color FOREGROUND_COLOR_BLACK = new Color(34,31,34);
    Controladora control = new Controladora();
    Beneficiario beneficiario;
    Servicio servicio;
    /**
     * Creates new form MenuServicios
     */
    public MenuServicios() {
        initComponents();
        setResizable(false);
        
        cargarTabla();
    }
    /*private void cargarRelacionesEnTabla() {
    // Obtener la lista de relaciones desde el controlador
    List<AsignacionServicio> relaciones = control.traerRelaciones(); // Llama al método que trae las relaciones
    DefaultTableModel modelo = (DefaultTableModel) tablaSerBen.getModel(); // Obtiene el modelo de la tabla
    modelo.setRowCount(0); // Limpia la tabla antes de llenarla

    // Llenar la tabla con las relaciones
    for (AsignacionServicio asignacion : relaciones) {
        Object[] fila = {
            asignacion.getBeneficiario().getNombre(), // Asumiendo que Beneficiario tiene un método getNombre()
            asignacion.getServicio().getNombre()       // Asumiendo que Servicio tiene un método getNombre()
        };
        modelo.addRow(fila); // Agrega la fila al modelo de la tabla
    }
}*/


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        irAtrasBen = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        txtServicio = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtDetallesServicio = new javax.swing.JTextArea();
        jLabel6 = new javax.swing.JLabel();
        btnGuardar = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        btnEliminar = new javax.swing.JButton();
        txtResponsable = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaServicios = new javax.swing.JTable();
        btnEditar = new javax.swing.JButton();
        buscarTxt = new javax.swing.JTextField();
        btnLimpiar = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tablaBen = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        tablaServiciosBen = new javax.swing.JTable();
        jSeparator1 = new javax.swing.JSeparator();
        txtAsigSer = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        buscarSer = new javax.swing.JTextField();
        buscarBen = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        txtAsigBen = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tablaSerBen = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Menú Servicios");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        irAtrasBen.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        irAtrasBen.setText("<< Atrás");
        irAtrasBen.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        irAtrasBen.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                irAtrasBenMouseClicked(evt);
            }
        });
        jPanel1.add(irAtrasBen, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 30, 120, 30));

        jPanel2.setBackground(UIManager.getColor("Component.accentColor"));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1130, 10));

        jLabel2.setFont(new java.awt.Font("Bungee", 0, 15)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("ACTIVA");
        jLabel2.setOpaque(true);
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 40, 90, 20));

        jLabel1.setBackground(UIManager.getColor("Component.accentColor"));
        jLabel1.setFont(new java.awt.Font("Bungee", 0, 15)); // NOI18N
        jLabel1.setForeground(UIManager.getColor("Component.foreground"));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("INCLUSIÓN");
        jLabel1.setOpaque(true);
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(970, 40, 160, 20));

        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtServicio.setDisabledTextColor(new java.awt.Color(255, 51, 51));
        txtServicio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtServicioActionPerformed(evt);
            }
        });
        jPanel3.add(txtServicio, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 50, 340, 40));

        txtDetallesServicio.setColumns(20);
        txtDetallesServicio.setRows(5);
        txtDetallesServicio.setBorder(null);
        txtDetallesServicio.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtDetallesServicioKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(txtDetallesServicio);

        jPanel3.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 50, 360, 110));

        jLabel6.setText("Buscar:");
        jPanel3.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 180, 50, 25));

        btnGuardar.setBackground(UIManager.getColor("Component.accentColor"));
        btnGuardar.setForeground(UIManager.getColor("Component.foreground"));
        btnGuardar.setText("Guardar");
        btnGuardar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnGuardar.setFocusable(false);
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });
        jPanel3.add(btnGuardar, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 120, 260, 40));

        jLabel5.setText("Detalles Servicio:");
        jPanel3.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 20, 130, -1));

        jLabel4.setText("Responsable Servicio:");
        jPanel3.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 20, -1, 20));

        btnEliminar.setText("Eliminar");
        btnEliminar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnEliminar.setFocusable(false);
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });
        jPanel3.add(btnEliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 120, 90, 40));

        txtResponsable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtResponsableActionPerformed(evt);
            }
        });
        jPanel3.add(txtResponsable, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 50, 260, 40));

        jLabel3.setText("Nombre Servicio:");
        jPanel3.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 20, -1, -1));

        tablaServicios.setFont(new java.awt.Font("Lato", 0, 12)); // NOI18N
        tablaServicios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tablaServicios.setFillsViewportHeight(true);
        tablaServicios.setFocusable(false);
        tablaServicios.setRowHeight(25);
        tablaServicios.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tablaServicios.setShowGrid(true);
        jScrollPane2.setViewportView(tablaServicios);

        jPanel3.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 220, 980, 340));

        btnEditar.setText("Editar");
        btnEditar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnEditar.setFocusable(false);
        btnEditar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnEditarMouseClicked(evt);
            }
        });
        jPanel3.add(btnEditar, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 120, 140, 40));
        jPanel3.add(buscarTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 180, 300, -1));

        btnLimpiar.setText("Limpiar");
        btnLimpiar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnLimpiar.setFocusable(false);
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });
        jPanel3.add(btnLimpiar, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 120, 90, 40));

        jTabbedPane1.addTab("Añadir Nuevo Servicio", jPanel3);

        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tablaBen.setFont(new java.awt.Font("Lato", 0, 12)); // NOI18N
        tablaBen.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tablaBen.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        tablaBen.setFillsViewportHeight(true);
        tablaBen.setFocusable(false);
        tablaBen.setRequestFocusEnabled(false);
        tablaBen.setRowHeight(25);
        tablaBen.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tablaBen.setShowGrid(false);
        tablaBen.setShowHorizontalLines(true);
        tablaBen.setShowVerticalLines(true);
        jScrollPane3.setViewportView(tablaBen);

        jPanel4.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 150, 490, 400));

        tablaServiciosBen.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tablaServiciosBen.setFillsViewportHeight(true);
        tablaServiciosBen.setFocusable(false);
        jScrollPane5.setViewportView(tablaServiciosBen);

        jPanel4.add(jScrollPane5, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 150, -1, 400));

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jPanel4.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 150, 10, 400));

        txtAsigSer.setDisabledTextColor(new java.awt.Color(255, 255, 255));
        txtAsigSer.setEnabled(false);
        jPanel4.add(txtAsigSer, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 50, 300, 40));

        jButton2.setText("Relacionar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel4.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(920, 50, 100, 40));

        jButton3.setText("Limpiar");
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton3MousePressed(evt);
            }
        });
        jPanel4.add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 50, 100, 40));
        jPanel4.add(buscarSer, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 110, 290, -1));
        jPanel4.add(buscarBen, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 110, 290, -1));

        jLabel7.setText("Nombre Servicio");
        jPanel4.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 20, 170, -1));

        jLabel8.setText("Nombre Beneficiario");
        jPanel4.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 20, 160, -1));

        jLabel9.setText("Buscar");
        jPanel4.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 110, 50, 25));

        jLabel10.setText("Buscar");
        jPanel4.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 110, 50, 25));

        jButton4.setText("jButton4");
        jButton4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton4MouseClicked(evt);
            }
        });
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel4.add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 60, -1, -1));

        txtAsigBen.setDisabledTextColor(new java.awt.Color(255, 255, 255));
        txtAsigBen.setEnabled(false);
        jPanel4.add(txtAsigBen, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 50, 300, 40));

        jTabbedPane1.addTab("Asignar Servicio a Beneficiario", jPanel4);

        tablaSerBen.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane4.setViewportView(tablaSerBen);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 1010, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(17, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(120, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Servicios Asignados", jPanel5);

        jPanel1.add(jTabbedPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 90, 1050, 610));

        jButton1.setText("Theme");
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jButton1MousePressed(evt);
            }
        });
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 40, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 720, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private boolean enModoEdicion = false;
    private int filaSeleccionada = -1;
    
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        txtServicio.requestFocusInWindow();
        cargarTabla();
        cargarTablaBeneficiario();
        cargarTablaServicios();
        cargarRelacionesEnTabla();
    }//GEN-LAST:event_formWindowOpened

    private void irAtrasBenMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_irAtrasBenMouseClicked

        // Crear y mostrar la nueva ventana
        Principal pantalla = new Principal();
        pantalla.setLocationRelativeTo(null);
        pantalla.setVisible(true);

        this.dispose();
    }//GEN-LAST:event_irAtrasBenMouseClicked

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        txtServicio.setText("");
        txtResponsable.setText("");
        txtDetallesServicio.setText("");
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void btnEditarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnEditarMouseClicked
        if (!enModoEdicion) {
            // Obtener el índice de la fila seleccionada
            filaSeleccionada = tablaServicios.getSelectedRow();

            // Verificar si hay una fila seleccionada
            if (filaSeleccionada != -1) {
                long num_Servicio = Long.parseLong(String.valueOf(tablaServicios.getValueAt(filaSeleccionada, 0)));

                this.servicio = control.traerServicio(num_Servicio);

                txtServicio.setText(servicio.getNombre());
                txtResponsable.setText(servicio.getResponsable());
                txtDetallesServicio.setText(servicio.getDescripcion());

                // Cambiar el texto del botón a "Guardar Cambios"
                btnEditar.setText("Guardar Cambios");

                // Deshabilitar los botones "Eliminar" y "Agregar"
                btnEliminar.setEnabled(false);
                btnGuardar.setEnabled(false);

                // Entrar en modo edición
                enModoEdicion = true;
            } else {
                // Mostrar un mensaje si no hay ninguna fila seleccionada
                JOptionPane.showMessageDialog(this, "No row selected. Please select a row to edit.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            // Si estamos en modo edición, validar y guardar los cambios
            if (filaSeleccionada != -1) {
                // Obtener los valores de los campos de texto
                String servicioNombre = txtServicio.getText().trim();
                String responsable = txtResponsable.getText().trim();
                String detalles = txtDetallesServicio.getText().trim();

                // Verificar si los campos obligatorios están vacíos
                if (servicioNombre.isEmpty() || responsable.isEmpty() || detalles.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "All fields must be filled out.", "Input Error", JOptionPane.ERROR_MESSAGE);
                    return; // Salir del método para evitar acciones posteriores
                }

                try {
                    control.modificarServicio(servicio, servicioNombre, responsable, detalles);
                } catch (Exception ex) {
                    Logger.getLogger(MenuServicios.class.getName()).log(Level.SEVERE, null, ex);
                }

                cargarTabla();
                cargarTablaBeneficiario();
                cargarTablaServicios();

                // Mostrar un mensaje de éxito
                JOptionPane.showMessageDialog(this, "Record updated successfully.");

                // Limpiar los campos de texto después de guardar los cambios
                txtServicio.setText("");
                txtResponsable.setText("");
                txtDetallesServicio.setText("");

                // Cambiar el texto del botón de nuevo a "Editar"
                btnEditar.setText("Editar");

                // Salir del modo edición
                enModoEdicion = false;

                // Reactivar los botones "Eliminar" y "Agregar"
                btnEliminar.setEnabled(true);
                btnGuardar.setEnabled(true);

                // Limpiar la selección de la tabla
                tablaServicios.clearSelection();
            }
        }
    }//GEN-LAST:event_btnEditarMouseClicked

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        // Obtener el índice de la fila seleccionada
        int filaSeleccionadaVista = tablaServicios.getSelectedRow();
        // Obtener el índice de la fila seleccionada

        if ( filaSeleccionadaVista != -1) {
            int filaSeleccionadaModelo = tablaServicios.convertRowIndexToModel(filaSeleccionadaVista);
            int confirmacion = JOptionPane.showConfirmDialog(this, "¿Estás seguro de que deseas eliminar este servicio?", "Confirmar eliminación", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);

            if (confirmacion == JOptionPane.YES_OPTION) {
                try {
                    long num_Servicio = Long.parseLong(String.valueOf(tablaServicios.getValueAt(filaSeleccionadaModelo, 0)));
                    control.borrarServicio(num_Servicio);
                    cargarTabla();
                    cargarTablaBeneficiario();
                    cargarTablaServicios();
                    mostrarMensaje("Servicio eliminado exitosamente.", "Info", "Éxito");
                } catch (Exception e) {
                    mostrarMensaje("Ocurrió un error al eliminar el servicio: " + e.getMessage(), "Error", "Error");
                }
            } else {

                mostrarMensaje("Eliminación cancelada.", "Info", "Cancelación");
            }
            tablaServicios.clearSelection();
        } else {
            mostrarMensaje("No se ha seleccionado ninguna fila.", "Error", "Error");
        }

        if (filaSeleccionada != -1) {
            int filaSeleccionadaModelo = tablaServicios.convertRowIndexToModel(filaSeleccionadaVista);
            int confirmacion = JOptionPane.showConfirmDialog(this, "¿Estás seguro de que deseas eliminar este servicio?", "Confirmar eliminación", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);

            if (confirmacion == JOptionPane.YES_OPTION) {
                try {
                    long num_Servicio = Long.parseLong(String.valueOf(tablaServicios.getValueAt(filaSeleccionadaModelo, 0)));
                    control.borrarServicio(num_Servicio);
                    cargarTabla();
                    cargarTablaBeneficiario();
                    cargarTablaServicios();
                    mostrarMensaje("Servicio eliminado exitosamente.", "Info", "Éxito");
                } catch (Exception e) {
                    mostrarMensaje("Ocurrió un error al eliminar el servicio: " + e.getMessage(), "Error", "Error");
                }
            } else {

                mostrarMensaje("Eliminación cancelada.", "Info", "Cancelación");
            }
            tablaServicios.clearSelection();
        } else {
            mostrarMensaje("No se ha seleccionado ninguna fila.", "Error", "Error");
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        try {
            // Obtener los valores de los campos de texto
            String servicio = this.txtServicio.getText().trim();
            String responsable = this.txtResponsable.getText().trim();
            String detalles_servicio= this.txtDetallesServicio.getText().trim();

            // Verificar si los campos obligatorios están vacíos
            if (servicio.isEmpty() || responsable.isEmpty()|| detalles_servicio.isEmpty()) {
                mostrarMensaje("All fields must be filled out.", "Error", "Input Error");
                txtServicio.requestFocusInWindow();
                return;
            }

            // Llamar al método del controlador para agregar el beneficiario
            control.agregarServicio(servicio, responsable, detalles_servicio);

            // Limpiar campos
            txtServicio.setText("");
            txtResponsable.setText("");
            txtDetallesServicio.setText("");

            // Establecer el enfoque en el primer campo
            txtServicio.requestFocusInWindow();

            // Actualizar la tabla
            cargarTabla();
            cargarTablaBeneficiario();
            cargarTablaServicios();

        } catch (Exception e) {
            mostrarMensaje("An unexpected error occurred: " + e.getMessage(), "Error", "Error");
            System.out.println("An error occurred: " + e.getMessage());
        }
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void txtDetallesServicioKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDetallesServicioKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_TAB) {
            evt.consume(); // Evitar el cambio de foco
            btnGuardar.doClick();  // Simular clic en el botón
        }
    }//GEN-LAST:event_txtDetallesServicioKeyPressed

    private void txtResponsableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtResponsableActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtResponsableActionPerformed

    private void jButton1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MousePressed
        try {
        // Verificar el Look and Feel actual y cambiar de tema
        if (UIManager.getLookAndFeel().getClass().getName().equals("com.formdev.flatlaf.FlatLightLaf")) {
            // Cambiar al tema IntelliJ
            IntelliJTheme.setup(Principal.class.getResourceAsStream("/default.theme.json"));
            UIManager.put("Component.accentColor", ACCENT_COLOR_BLACK);
            UIManager.put("Component.foreground", FOREGROUND_COLOR_BLACK);
        } else {
            // Volver a FlatLightLaf
            FlatLightLaf.setup();
            UIManager.put("Component.accentColor", ACCENT_COLOR_LIGHT);
            UIManager.put("Component.foreground", FOREGROUND_COLOR_LIGHT);
        }

        // Actualizar la UI
        SwingUtilities.updateComponentTreeUI(this);

        // Navegar a la nueva pantalla
        MenuServicios pantalla = new MenuServicios();
        pantalla.setLocationRelativeTo(null);
        pantalla.setVisible(true);
        
        // Cerrar la pantalla actual
        this.dispose();

    } catch (Exception e) {
        e.printStackTrace();
        // Aquí podrías mostrar un mensaje al usuario si ocurre un error
    }
    }//GEN-LAST:event_jButton1MousePressed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    private int filaSeleccionadaBen = -1;
    private int filaSeleccionadaSer = -1;
    
    private void jButton4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton4MouseClicked
        // TODO add your handling code here:
    filaSeleccionadaBen = tablaBen.getSelectedRow();
    filaSeleccionadaSer = tablaServiciosBen.getSelectedRow();

    if (filaSeleccionadaBen != -1 && filaSeleccionadaSer != -1) {
        long num_Beneficiario = Long.parseLong(String.valueOf(tablaBen.getValueAt(filaSeleccionadaBen, 0)));
        long num_Servicio = Long.parseLong(String.valueOf(tablaServiciosBen.getValueAt(filaSeleccionadaSer, 0)));

        // Obtener los objetos Beneficiario y Servicio a partir de los IDs
        this.beneficiario = control.traerBeneficiario(num_Beneficiario);
        this.servicio = control.traerServicio(num_Servicio);

        // Actualizar los campos de texto en la interfaz
        txtAsigBen.setText(beneficiario.getNombre());
        txtAsigSer.setText(servicio.getNombre());

        // Llamar al método para asignar el servicio al beneficiario
        boolean exito = control.asignarServicioABeneficiario(beneficiario, servicio);
        
        if (exito) {
            JOptionPane.showMessageDialog(this, "Se relacionaron correctamente.", "Info", JOptionPane.INFORMATION_MESSAGE);
            cargarRelacionesEnTabla(); // Cargar de nuevo las relaciones después de una asignación exitosa
        } else {
            JOptionPane.showMessageDialog(this, "Hubo un error al relacionar.", "Error", JOptionPane.ERROR_MESSAGE);
        }
        
    } else {
        // Mostrar un mensaje si no se seleccionó ninguna fila
        JOptionPane.showMessageDialog(this, "Seleccione un beneficiario y un servicio.", "Error", JOptionPane.ERROR_MESSAGE);
    }  
        
      
    }//GEN-LAST:event_jButton4MouseClicked

    private void txtServicioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtServicioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtServicioActionPerformed

    private void jButton3MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MousePressed
        // TODO add your handling code here:
        txtAsigBen.setText("");
        txtAsigSer.setText("");
    }//GEN-LAST:event_jButton3MousePressed

    
    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JTextField buscarBen;
    private javax.swing.JTextField buscarSer;
    private javax.swing.JTextField buscarTxt;
    private javax.swing.JLabel irAtrasBen;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable tablaBen;
    private javax.swing.JTable tablaSerBen;
    private javax.swing.JTable tablaServicios;
    private javax.swing.JTable tablaServiciosBen;
    private javax.swing.JTextField txtAsigBen;
    private javax.swing.JTextField txtAsigSer;
    private javax.swing.JTextArea txtDetallesServicio;
    private javax.swing.JTextField txtResponsable;
    private javax.swing.JTextField txtServicio;
    // End of variables declaration//GEN-END:variables

    private void cargarTabla() {
        DefaultTableModel modeloTabla = new DefaultTableModel(){
            @Override
            public boolean isCellEditable(int row, int column){
                return false;
            }
        };
        
        //establecemos los nombres de las columnas
        String titulos[] = {"Id", "Servicio", "Responsable", "Detalles"};
        modeloTabla.setColumnIdentifiers(titulos);
        
        //carga de datos desde la base de datos
        List <Servicio> ListarServicios = control.traerServicios();
        
        
        
        if(ListarServicios != null){
            for(Servicio ser : ListarServicios){
                Object[] objeto = {ser.getId(),ser.getNombre(), 
                    ser.getResponsable(), ser.getDescripcion()};
                
               modeloTabla.addRow(objeto);
            }
        }
        tablaServicios.setModel(modeloTabla);
        // Evitar que las columnas se reordenen
        tablaServicios.getTableHeader().setReorderingAllowed(false);

        // Evitar que las columnas se redimensionen
        tablaServicios.getTableHeader().setResizingAllowed(false);

        // Configurar el TableRowSorter para habilitar la funcionalidad de filtrar y ordenar
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(modeloTabla);
        tablaServicios.setRowSorter(sorter);
        
        ajustarAnchoColumnas(tablaServicios);
        centrarColumnas(tablaServicios, new int[]{0});
        
        // Configuración de filtrado mediante el campo de texto (buscarTxt)
        buscarTxt.addKeyListener(new KeyAdapter() {
            @Override
            public void keyReleased(KeyEvent e) {
                String text = buscarTxt.getText();
                if (text.trim().length() == 0) {
                    // Si el campo está vacío, no aplicar ningún filtro
                    sorter.setRowFilter(null);
                    btnEliminar.setEnabled(true);
                } else {
                    // Aplicar el filtro (insensible a mayúsculas/minúsculas)
                    sorter.setRowFilter(RowFilter.regexFilter("(?i)" + text));
                    btnEliminar.setEnabled(false); // Deshabilitar el botón eliminar mientras se filtra
                }
            }
        });
        
        // Focus listener para limpiar el filtro cuando el campo de búsqueda pierde el foco
        buscarTxt.addFocusListener(new FocusAdapter() {
            @Override
            public void focusLost(FocusEvent e) {
                buscarTxt.setText(""); // Limpiar el campo de texto
                sorter.setRowFilter(null); // Quitar el filtro
                btnEliminar.setEnabled(true);
            }
        });
    }
    
    public void mostrarMensaje(String mensaje, String tipo, String titulo){
        JOptionPane optionPane = new JOptionPane(mensaje);
        if(tipo.equals("Info")){
            optionPane.setMessageType(JOptionPane.INFORMATION_MESSAGE);  
        } else if (tipo.equals("Error")){
            optionPane.setMessageType(JOptionPane.ERROR_MESSAGE);
        }
        
        JDialog dialog = optionPane.createDialog(titulo);
        dialog.setVisible(true);
        dialog.setAlwaysOnTop(true);
    }

    private void ajustarAnchoColumnas(JTable tabla) {
        for (int i = 0; i < tabla.getColumnModel().getColumnCount(); i++) {
        int width = 0; // Ancho inicial
        
        // Calcular el ancho necesario basado en las celdas
        for (int j = 0; j < tabla.getRowCount(); j++) {
            Object value = tabla.getValueAt(j, i);
            if (value != null) {
                width = Math.max(width, value.toString().length());
            }
        }
        // Ajustar el ancho de la columna
        tabla.getColumnModel().getColumn(i).setPreferredWidth(width * 10); // Ajustar el multiplicador según sea necesario
        }
    }   
    
    private void centrarColumnas(JTable tabla, int[] columnas) {
        DefaultTableCellRenderer renderer = new DefaultTableCellRenderer();
        renderer.setHorizontalAlignment(SwingConstants.CENTER);

        for (int col : columnas) {
            tabla.getColumnModel().getColumn(col).setCellRenderer(renderer);
        }
    }
    
    private void cargarTablaBeneficiario() {
        // Crear el modelo de la tabla con las columnas que no son editables
        DefaultTableModel modeloTabla = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false; // Todas las celdas no editables
            }
        };

        // Establecer los nombres de las columnas
        String titulos[] = {"Id", "Nombre", "Discapacidad"};
        modeloTabla.setColumnIdentifiers(titulos);

        // Cargar los datos desde la base de datos o la fuente de datos
        List<Beneficiario> listarBeneficiarios = control.traerBeneficiarios();

        // Verificar si hay datos que cargar
        if (listarBeneficiarios != null) {
            for (Beneficiario ben : listarBeneficiarios) {
                // Añadir cada beneficiario al modelo de la tabla
                Object[] objeto = {ben.getId(), ben.getNombre(), ben.getDiscapacidades()};
                modeloTabla.addRow(objeto);
            }
        }

        // Asignar el modelo a la tabla
        tablaBen.setModel(modeloTabla);
        // Evitar que las columnas se reordenen
        tablaBen.getTableHeader().setReorderingAllowed(false);

        // Evitar que las columnas se redimensionen
        tablaBen.getTableHeader().setResizingAllowed(false);

        // Configurar el TableRowSorter para habilitar la funcionalidad de filtrar y ordenar
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(modeloTabla);
        tablaBen.setRowSorter(sorter);
   

        // Ajustar el ancho de las columnas de la tabla si es necesario
        ajustarAnchoColumnas(tablaBen);
        centrarColumnas(tablaBen, new int[]{0});
        
        // Configuración de filtrado mediante el campo de texto (buscarTxt)
        buscarBen.addKeyListener(new KeyAdapter() {
            @Override
            public void keyReleased(KeyEvent e) {
                String text = buscarBen.getText();
                if (text.trim().length() == 0) {
                    // Si el campo está vacío, no aplicar ningún filtro
                    sorter.setRowFilter(null);
                    btnEliminar.setEnabled(true);
                } else {
                    // Aplicar el filtro (insensible a mayúsculas/minúsculas)
                    sorter.setRowFilter(RowFilter.regexFilter("(?i)" + text));
                    btnEliminar.setEnabled(false); // Deshabilitar el botón eliminar mientras se filtra
                }
            }
        });
        };
    
    
    private void cargarTablaServicios() {
        DefaultTableModel modeloTabla = new DefaultTableModel(){
            @Override
            public boolean isCellEditable(int row, int column){
                return false;
            }
        };
        
        //establecemos los nombres de las columnas
        String titulos[] = {"Id", "Servicio", "Responsable"};
        modeloTabla.setColumnIdentifiers(titulos);
        
        //carga de datos desde la base de datos
        List <Servicio> ListarServicios = control.traerServicios();
        
        
        if(ListarServicios != null){
            for(Servicio ser : ListarServicios){
                Object[] objeto = {ser.getId(),ser.getNombre(), 
                    ser.getResponsable()};
                
               modeloTabla.addRow(objeto);
            }
        }
        tablaServiciosBen.setModel(modeloTabla);
        // Evitar que las columnas se reordenen
        tablaServiciosBen.getTableHeader().setReorderingAllowed(false);

        // Evitar que las columnas se redimensionen
        tablaServiciosBen.getTableHeader().setResizingAllowed(false);

        
        ajustarAnchoColumnas(tablaServiciosBen);
        centrarColumnas(tablaServiciosBen, new int[]{0});
        
        // Configurar el TableRowSorter para habilitar la funcionalidad de filtrar y ordenar
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(modeloTabla);
        tablaServiciosBen.setRowSorter(sorter);
        
        // Configuración de filtrado mediante el campo de texto (buscarTxt)
        buscarSer.addKeyListener(new KeyAdapter() {
            @Override
            public void keyReleased(KeyEvent e) {
                String text = buscarSer.getText();
                if (text.trim().length() == 0) {
                    // Si el campo está vacío, no aplicar ningún filtro
                    sorter.setRowFilter(null);
                    btnEliminar.setEnabled(true);
                } else {
                    // Aplicar el filtro (insensible a mayúsculas/minúsculas)
                    sorter.setRowFilter(RowFilter.regexFilter("(?i)" + text));
                    btnEliminar.setEnabled(false); // Deshabilitar el botón eliminar mientras se filtra
                }
            }
        });
       
        
    }
    
    private void cargarRelacionesEnTabla() {
    // Obtener la lista de relaciones desde el controlador
    List<AsignacionServicio> relaciones = control.traerRelaciones(); // Llama al método que trae las relaciones
    DefaultTableModel modelo = (DefaultTableModel) tablaSerBen.getModel(); // Obtiene el modelo de la tabla
    modelo.setRowCount(0); // Limpia la tabla antes de llenarla

    // Llenar la tabla con las relaciones
    for (AsignacionServicio asignacion : relaciones) {
        Object[] fila = {
            asignacion.getBeneficiario() != null ? asignacion.getBeneficiario().getNombre() : "N/A", // Manejo de null
            asignacion.getServicio() != null ? asignacion.getServicio().getNombre() : "N/A" // Manejo de null
        };
        modelo.addRow(fila); // Agrega la fila al modelo de la tabla
    }

    // Ajustar el ancho de las columnas de la tabla si es necesario
    ajustarAnchoColumnas(tablaSerBen);
    centrarColumnas(tablaSerBen, new int[]{0, 1}); // Centrar las columnas que necesites
}
   /* private void inicializarTablaRelaciones() {
    DefaultTableModel modelo = new DefaultTableModel();
    modelo.addColumn("Beneficiario");
    modelo.addColumn("Servicio");
    tablaSerBen.setModel(modelo);
}*/



}
